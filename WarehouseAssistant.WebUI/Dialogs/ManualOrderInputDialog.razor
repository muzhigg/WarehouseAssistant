@using WarehouseAssistant.Core.Calculation
@typeparam TCalculatedItem where TCalculatedItem : class, ICalculatedTableItem

<MudDialog Class="manual-order-input-dialog">
    <TitleContent>
        <MudText Typo="Typo.h6">Введите количество</MudText>
    </TitleContent>
    <DialogContent>
        <MudText Class="manual-order-input-text">@Text</MudText>
        @AdditionalRenderFragment
        <MudTextField Class="manual-input-value-field" T="uint" @bind-Value="Value" Label="Введите количество вручную"></MudTextField>
    </DialogContent>
    <DialogActions>
        <MudButton Disabled="@(Value == 0)" Class="manual-input-submit" Color="Color.Primary" OnClick="ManualInputSubmit">Добавить</MudButton>
        <MudButton Color="Color.Secondary" OnClick="ManualInputCancel">Пропустить</MudButton>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] public TCalculatedItem? Item                     { get; set; }
    [Parameter] public string?          Text                     { get; set; }
    [Parameter] public RenderFragment?  AdditionalRenderFragment { get; set; }

    private uint Value
    {
        get => (uint)Item!.QuantityToOrder;
        set => Item!.QuantityToOrder = (int)value;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        EnsureItemIsSet();
    }

    private void EnsureItemIsSet()
    {
        if (Item == null)
        {
            throw new ArgumentNullException(nameof(Item), $"{nameof(Item)} is not set as parameter");
        }
    }

    private void ManualInputSubmit(MouseEventArgs obj)
    {
        MudDialog.Close(DialogResult.Ok(Value));
    }

    private void ManualInputCancel(MouseEventArgs obj)
    {
        Item!.QuantityToOrder = 0;
        MudDialog.Cancel();
    }
}