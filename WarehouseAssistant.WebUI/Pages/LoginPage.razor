@page "/login"
@inject NavigationManager           Navigation
@inject HttpClient                  HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Diagnostics
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using WarehouseAssistant.WebUI.Services
@implements IDisposable

<h3>Login</h3>

<EditForm Model="_loginModel" OnValidSubmit="HandleLogin">
	<DataAnnotationsValidator/>
	<ValidationSummary/>

	<MudTextField @bind-Value="_loginModel.Username" Label="Username" Required="true" Variant="Variant.Outlined"
	              Margin="Margin.Dense"/>
	<MudTextField @bind-Value="_loginModel.Password" Label="Password" InputType="InputType.Password" Required="true"
	              Variant="Variant.Outlined" Margin="Margin.Dense"/>

	<MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">Login</MudButton>
</EditForm>

<MudOverlay @bind-Visible="_isBusy" AutoClose="false">
	<MudProgressCircular Size="Size.Large" Indeterminate="true"></MudProgressCircular>
</MudOverlay>

@if (_loginFailed)
{
	<MudText Color="Color.Error">Login failed. Please check your credentials and try again.</MudText>
}

@code {
	private readonly LoginModel _loginModel  = new();
	private          bool       _loginFailed = false;
	private          bool       _isBusy;

	private async Task HandleLogin()
	{
		_isBusy      = true;
		_loginFailed = false;

		try
		{
			var response = await HttpClient.PostAsJsonAsync("https://warehouseassistantdbapi.onrender.com/api/auth/login", _loginModel);
			if (response.IsSuccessStatusCode)
			{
// var result = await response.Content.ReadFromJsonAsync<AuthenticationResponse>();
				string token = await response.Content.ReadAsStringAsync();
				Debug.WriteLine(token);
				if (!string.IsNullOrEmpty(token))
				{
					((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(token);
					Navigation.NavigateTo("/");
				}
				else
				{
					_loginFailed = true;
				}
			}
			else
			{
				_loginFailed = true;
			}

			Debug.WriteLine(response.Content);
		}
		catch (Exception e)
		{
			_loginFailed = true;
			Debug.WriteLine(e.Message);
		}
		finally
		{
			_isBusy = false;
		}
	}

	public void Dispose()
	{
		_loginFailed = false;
	}

	public class LoginModel
	{
		public string Username { get; set; } = null!;
		public string Password { get; set; } = null!;
	}

	public class AuthenticationResponse
	{
		public string Token { get; set; } = null!;
	}

}